name: ci
on:
  push:
    branches:
      - '**'
    tags-ignore:
      - '**'
    paths-ignore:
      - "*.md"
  pull_request:
    branches:
      - master
      - main

jobs:
  create-matrices:
    name: Create version matrices
    runs-on: ubuntu-latest
    outputs:
      alpine-versions: ${{steps.alpine.outputs.versions}}
      amazonlinux-versions: ${{steps.amazonlinux.outputs.versions}}
      archlinux-versions: ${{steps.archlinux.outputs.versions}}
      centos-versions: ${{steps.centos.outputs.versions}}
      debian-versions: ${{steps.debian.outputs.versions}}
      oraclelinux-versions: ${{steps.oraclelinux.outputs.versions}}
      photon-versions: ${{steps.photon.outputs.versions}}
      scientificlinux-versions: ${{steps.scientificlinux.outputs.versions}}
      ubuntu-versions: ${{steps.ubuntu.outputs.versions}}
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2
      - name: Generate alpine version matrix
        id: alpine
        run: echo "::set-output name=versions::$(ls Dockerfiles/alpine/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate amazon linux version matrix
        id: amazonlinux
        run: echo "::set-output name=versions::$(ls Dockerfiles/amazonlinux/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate arch linux version matrix
        id: archlinux
        run: echo "::set-output name=versions::$(ls Dockerfiles/archlinux/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate centos version matrix
        id: centos
        run: echo "::set-output name=versions::$(ls Dockerfiles/centos/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate debian version matrix
        id: debian
        run: echo "::set-output name=versions::$(ls Dockerfiles/debian/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate oracle linux version matrix
        id: oraclelinux
        run: echo "::set-output name=versions::$(ls Dockerfiles/oraclelinux/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate photon version matrix
        id: photon
        run: echo "::set-output name=versions::$(ls Dockerfiles/photon/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate scientific linux version matrix
        id: scientificlinux
        run: echo "::set-output name=versions::$(ls Dockerfiles/sl/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
      - name: Generate ubuntu version matrix
        id: ubuntu
        run: echo "::set-output name=versions::$(ls Dockerfiles/ubuntu/*/ | cut -f3 -d'/' | sort -n | jq -cnR '[inputs | select(length>0)]')"
  alpine:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.alpine-versions)}}
    name: Build on Alpine Linux ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Alpine Linux ${{ matrix.version }}
        run: Dockerfiles/alpine/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Alpine Linux ${{ matrix.version }}
        run: Dockerfiles/alpine/${{ matrix.version }}/manage.sh --build --clean
  amazonlinux:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.amazonlinux-versions)}}
    name: Build on Amazon Linux ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Amazon Linux ${{ matrix.version }}
        run:  Dockerfiles/amazonlinux/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Amazon Linux ${{ matrix.version }}
        run: Dockerfiles/amazonlinux/${{ matrix.version }}/manage.sh --build --clean
  archlinux:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.archlinux-versions)}}
    name: Build on Arch Linux ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Arch Linux ${{ matrix.version }}
        run:  Dockerfiles/archlinux/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Arch Linux ${{ matrix.version }}
        run: Dockerfiles/archlinux/${{ matrix.version }}/manage.sh --build --clean
  centos:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.centos-versions)}}
    name: Build on Centos ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Centos ${{ matrix.version }}
        run: Dockerfiles/centos/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Centos ${{ matrix.version }}
        run: Dockerfiles/centos/${{ matrix.version }}/manage.sh --build --clean
  debian:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.debian-versions)}}
    name: Build on Debian ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Debian ${{ matrix.version }}
        run: Dockerfiles/debian/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Debian ${{ matrix.version }}
        run: Dockerfiles/debian/${{ matrix.version }}/manage.sh --build --clean
  oraclelinux:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.oraclelinux-versions)}}
    name: Build on Oracle Linux ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Oracle Linux ${{ matrix.version }}
        run: Dockerfiles/oraclelinux/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Oracle Linux ${{ matrix.version }}
        run: Dockerfiles/oraclelinux/${{ matrix.version }}/manage.sh --build --clean
  photon:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.photon-versions)}}
    name: Build on Photon ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Photon ${{ matrix.version }}
        run: Dockerfiles/photon/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Photon ${{ matrix.version }}
        run: Dockerfiles/photon/${{ matrix.version }}/manage.sh --build --clean
  scientificlinux:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.scientificlinux-versions)}}
    name: Build on Scientific Linux ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Scientific Linux ${{ matrix.version }}
        run: Dockerfiles/sl/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Scientific Linux ${{ matrix.version }}
        run: Dockerfiles/sl/${{ matrix.version }}/manage.sh --build --clean
  ubuntu:
    runs-on: ubuntu-latest
    needs: create-matrices
    strategy:
      fail-fast: false
      matrix:
        version: ${{fromJson(needs.create-matrices.outputs.ubuntu-versions)}}
    name: Build on Ubuntu ${{ matrix.version }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Ubuntu ${{ matrix.version }}
        run: Dockerfiles/ubuntu/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Ubuntu ${{ matrix.version }}
        run: Dockerfiles/ubuntu/${{ matrix.version }}/manage.sh --build --clean
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Run Shellcheck
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/shellcheck/master/pipeline.sh)
  slack-workflow-status:
    if: always()
    name: Slack Post Workflow Notification
    needs:
      - alpine
      - amazonlinux
      - archlinux
      - centos
      - debian
      - oraclelinux
      - photon
      - scientificlinux
      - ubuntu
      - shellcheck
    runs-on: ubuntu-latest
    steps:
      - name: Slack Post Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          include_jobs: true
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
