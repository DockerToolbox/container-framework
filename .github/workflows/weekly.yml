name: weekly
on:
  schedule:
    - cron:  '0 2 * * 1'
    
jobs:
  alpine:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '3.11', '3.12', '3.13', '3.14', '3.15' ]
    name: Build on Alpine Linux ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Alpine Linux ${{ matrix.version }}
        run: Dockerfiles/alpine/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Alpine Linux ${{ matrix.version }}
        run: Dockerfiles/alpine/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/alpine/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/alpine/${{ matrix.version }}/manage.sh --publish --ghcr
  amazonlinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '1', '2' ]
    name: Build on Amazon Linux ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Amazon Linux ${{ matrix.version }}
        run:  Dockerfiles/amazonlinux/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Amazon Linux ${{ matrix.version }}
        run: Dockerfiles/amazonlinux/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/amazonlinux/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/amazonlinux/${{ matrix.version }}/manage.sh --publish --ghcr
  archlinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ 'base' ]
    name: Build on Arch Linux ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Arch Linux ${{ matrix.version }}
        run:  Dockerfiles/archlinux/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Arch Linux ${{ matrix.version }}
        run: Dockerfiles/archlinux/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/archlinux/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/archlinux/${{ matrix.version }}/manage.sh --publish --ghcr
  centos:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '7', '8' ]
    name: Build on Centos ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Centos ${{ matrix.version }}
        run: Dockerfiles/centos/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Centos ${{ matrix.version }}
        run: Dockerfiles/centos/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/centos/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/centos/${{ matrix.version }}/manage.sh --publish --ghcr
  debian:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '9', '9-slim', '10', '10-slim', '11', '11-slim', '12', '12-slim' ]
    name: Build on Debian ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Debian ${{ matrix.version }}
        run: Dockerfiles/debian/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Debian ${{ matrix.version }}
        run: Dockerfiles/debian/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/debian/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/debian/${{ matrix.version }}/manage.sh --publish --ghcr
  oraclelinux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '7', '7-slim', '8', '8-slim' ]
    name: Build on Oracle Linux ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Oracle Linux ${{ matrix.version }}
        run: Dockerfiles/oraclelinux/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Oracle Linux ${{ matrix.version }}
        run: Dockerfiles/oraclelinux/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/oraclelinux/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/oraclelinux/${{ matrix.version }}/manage.sh --publish --ghcr
  photon:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '1.0', '2.0', '3.0', '4.0' ]
    name: Build on Photon ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Photon ${{ matrix.version }}
        run: Dockerfiles/photon/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Photon ${{ matrix.version }}
        run: Dockerfiles/photon/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/photon/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/photon/${{ matrix.version }}/manage.sh --publish --ghcr
  sl:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '7' ]
    name: Build on Scientific Linux ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Scientific Linux ${{ matrix.version }}
        run: Dockerfiles/sl/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Scientific Linux ${{ matrix.version }}
        run: Dockerfiles/sl/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/sl/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/sl/${{ matrix.version }}/manage.sh --publish --ghcr
  ubuntu:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        version: [ '14.04', '16.04', '18.04', '20.04', '22.04' ]
    name: Build on Ubuntu ${{ matrix.version }}
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Docker
        uses: docker-practice/actions-setup-docker@master
      - name: Generate Dockerfile for Ubuntu ${{ matrix.version }}
        run: Dockerfiles/ubuntu/${{ matrix.version }}/manage.sh --generate
      - name: Run Hadolint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/hadolint/master/pipeline.sh)
      - name: Build on Ubuntu ${{ matrix.version }}
        run: Dockerfiles/ubuntu/${{ matrix.version }}/manage.sh --build --clean
      - name: Login to Docker Hub
        run: echo ${{secrets.DOCKERHUB_PASSWORD}} | docker login --username ${{secrets.DOCKERHUB_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/ubuntu/${{ matrix.version }}/manage.sh --publish
      - name: Login to GitHub Container Registry
        run: echo ${{secrets.GHCR_PASSWORD}} | docker login ghcr.io --username ${{secrets.GHCR_USERNAME}} --password-stdin
      - name: Publish Container
        run: Dockerfiles/ubuntu/${{ matrix.version }}/manage.sh --publish --ghcr
  awesomebot:
    name: Awesomebot
    runs-on: ubuntu-latest
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Ruby 3.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: Run Awesomebot
        env:
          FLAGS: "default"
          EXCLUDE_FILES: "CHANGELOG.md,Config/.*"
          WHITELIST: "https://img.shields.io"
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/awesomebot/master/pipeline.sh)
  shellcheck:
    name: ShellCheck
    runs-on: ubuntu-latest
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Run Shellcheck
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/shellcheck/master/pipeline.sh)
  yaml-lint:
    name: YAML Lint
    runs-on: ubuntu-latest
    steps:
      - name: Get tag name
        id: get_tag_name
        run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
      - uses: actions/checkout@v2
        with:
          ref: ${{ steps.get_tag_name.outputs.VERSION }}
      - name: Set up Ruby 3.0
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.0
      - name: Run YAML-Lint
        run: bash <(curl -s https://raw.githubusercontent.com/CICDToolbox/yaml-lint/master/pipeline.sh)
  slack-workflow-status:
    if: always()
    name: Slack Post Workflow Notification
    needs:
      - alpine
      - amazonlinux
      - archlinux
      - centos
      - debian
      - oraclelinux
      - photon
      - sl
      - ubuntu
      - awesomebot
      - shellcheck
      - yaml-lint
    runs-on: ubuntu-latest
    steps:
      - name: Slack Post Workflow Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          include_jobs: true
          repo_token: ${{secrets.GITHUB_TOKEN}}
          slack_webhook_url: ${{secrets.SLACK_WEBHOOK_URL}}
